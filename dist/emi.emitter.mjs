function getOrCreateEventData(t,e){let i=t.get(e);return i||(i=new EventData,t.set(e,i)),i}class EventData{idMap;fnMap;onceList;emitList;constructor(){this.idMap=new Map,this.fnMap=new Map,this.onceList=new Set,this.emitList=null}add(t,e){let i=this.fnMap.get(t);i||(i=new Set,this.fnMap.set(t,i));const s=Symbol();return i.add(s),this.idMap.set(s,t),e&&this.onceList.add(s),this.emitList&&this.emitList.push(t),s}delId(t){if(!this.idMap.has(t))return;const e=this.idMap.get(t),i=this.fnMap.get(e);this.onceList.delete(t),this.idMap.delete(t),i.delete(t),i.size||this.fnMap.delete(e),this.emitList=null}delFn(t){const e=this.fnMap.get(t);if(e){for(const t of e)this.onceList.delete(t),this.idMap.delete(t);this.fnMap.delete(t),this.emitList=null}}}class Emitter{_events;constructor(){this._events=new Map}on(t,e){return getOrCreateEventData(this._events,t).add(e)}once(t,e){return getOrCreateEventData(this._events,t).add(e,!0)}off(t,e){if(void 0===t)return void this._events.clear();if(void 0===e)return void this._events.delete(t);const i=this._events.get(t);i&&("function"==typeof e?i.delFn(e):i.delId(e),i.idMap.size||this._events.delete(t))}emit(t,...e){const i=this._events.get(t);if(!i)return;const{idMap:s,onceList:n}=i;if(!s.size)return;const a=i.emitList||[...s.values()];if(n.size)if(n.size===s.size)this._events.delete(t);else for(const t of n)i.delId(t);else i.emitList=a;let d=0,o=a.length;for(;d<o;d++)a[d](...e)}}export{Emitter};