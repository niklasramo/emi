var r={ADD:"add",UPDATE:"update",IGNORE:"ignore",THROW:"throw"};function l(a,e){let n=a.get(e);return n||(n=new o,a.set(e,n)),n}var o=class{constructor(){this.idMap=new Map,this.cbMap=new Map,this.onceList=new Set,this.emitList=null}add(e,n,t,i,s){if(!s&&this.cbMap.has(e))throw new Error("Emitter: tried to add an existing event listener to an event!");if(this.idMap.has(t))switch(i){case r.THROW:throw new Error("Emitter: tried to add an existing event listener id to an event!");case r.IGNORE:return t;default:this.delId(t,i===r.UPDATE)}let d=this.cbMap.get(e);return d===void 0?this.cbMap.set(e,t):d instanceof Set?d.add(t):this.cbMap.set(e,new Set([d,t])),this.idMap.set(t,e),n&&this.onceList.add(t),this.emitList&&this.emitList.push(e),t}delId(e,n=!1){let t=this.idMap.get(e);if(!t)return;n||this.idMap.delete(e),this.onceList.delete(e);let i=this.cbMap.get(t);i instanceof Set?(i.delete(e),i.size||this.cbMap.delete(t)):this.cbMap.delete(t),this.emitList=null}delFn(e){let n=this.cbMap.get(e);if(n!==void 0){if(n instanceof Set)for(let t of n)this.onceList.delete(t),this.idMap.delete(t);else this.onceList.delete(n),this.idMap.delete(n);this.cbMap.delete(e),this.emitList=null}}},p=class{constructor(e={}){let{idDedupeMode:n=r.ADD,allowDuplicateListeners:t=!0}=e;this.idDedupeMode=n,this.createId=e.createId||Symbol,this.allowDuplicateListeners=t,this._events=new Map}_getListeners(e){let n=this._events.get(e);if(!n)return null;let{idMap:t,onceList:i}=n;if(!t.size)return null;let s=n.emitList||[...t.values()];if(i.size)if(i.size===t.size)this._events.delete(e);else for(let d of i)n.delId(d);else n.emitList=s;return s}on(e,n,t=this.createId()){return l(this._events,e).add(n,!1,t,this.idDedupeMode,this.allowDuplicateListeners)}once(e,n,t=this.createId()){return l(this._events,e).add(n,!0,t,this.idDedupeMode,this.allowDuplicateListeners)}off(e,n){if(e===void 0){this._events.clear();return}if(n===void 0){this._events.delete(e);return}let t=this._events.get(e);t&&(typeof n=="function"?t.delFn(n):t.delId(n),t.idMap.size||this._events.delete(e))}emit(e,...n){let t=this._getListeners(e);if(!t)return;let i=0,s=t.length;for(;i<s;i++)t[i](...n)}listenerCount(e){if(e===void 0){let n=0;return this._events.forEach((t,i)=>{n+=this.listenerCount(i)}),n}return this._events.get(e)?.idMap.size||0}};export{p as Emitter,r as EmitterIdDedupeMode};
