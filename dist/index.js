var r={ADD:"add",UPDATE:"update",IGNORE:"ignore",THROW:"throw"},d=class{constructor(){this.idMap=new Map,this.emitList=null}add(t,e,n){if(this.idMap.has(e))switch(n){case r.THROW:throw new Error("Eventti: duplicate listener id!");case r.IGNORE:return e;case r.UPDATE:{this.emitList=null;break}default:this.del(e)}return this.idMap.set(e,t),this.emitList?.push(t),e}del(t){this.idMap.delete(t)&&(this.emitList=null)}},o=class{constructor(t={}){let{dedupeMode:e=r.ADD,createId:n=()=>Symbol()}=t;this.dedupeMode=e,this.createId=n,this._events=new Map}_getListeners(t){let e=this._events.get(t);if(e){let{idMap:n}=e;if(n.size)return e.emitList=e.emitList||[...n.values()]}return null}on(t,e,n){let{_events:i}=this,s=i.get(t);return s||(s=new d,i.set(t,s)),s.add(e,n===void 0?this.createId(e):n,this.dedupeMode)}once(t,e,n){let i=n===void 0?this.createId(e):n,s=!1;return this.on(t,(...E)=>{s||(s=!0,this.off(t,i),e(...E))},i)}off(t,e){if(t===void 0){this._events.clear();return}if(e===void 0){this._events.delete(t);return}let n=this._events.get(t);n&&(n.del(e),n.idMap.size||this._events.delete(t))}emit(t,...e){let n=this._getListeners(t);if(!n)return;let i=0,s=n.length;for(;i<s;i++)n[i](...e)}listenerCount(t){if(t===void 0){let e=0;return this._events.forEach((n,i)=>{e+=this.listenerCount(i)}),e}return this._events.get(t)?.idMap.size||0}};export{o as Emitter,r as EmitterDedupeMode};
