var r={ADD:"add",UPDATE:"update",IGNORE:"ignore",THROW:"throw"},a=class{constructor(n={}){let{dedupe:t=r.ADD,getId:e=()=>Symbol()}=n;this.dedupe=t,this.getId=e,this._events=new Map}_getListeners(n){let t=this._events.get(n);if(t){let{idMap:e}=t;if(e.size)return t.emitList=t.emitList||[...e.values()]}return null}on(n,t,e){let{_events:s}=this,i=s.get(n);i||(i={idMap:new Map,emitList:null},s.set(n,i));let{idMap:d,emitList:o}=i;if(e=e===void 0?this.getId(t):e,d.has(e))switch(this.dedupe){case r.THROW:throw new Error("Eventti: duplicate listener id!");case r.IGNORE:return e;case r.UPDATE:{i.emitList=null;break}default:d.delete(e),i.emitList=null}return d.set(e,t),o?.push(t),e}once(n,t,e){let s=!1;return e=e===void 0?this.getId(t):e,this.on(n,(...i)=>{s||(s=!0,this.off(n,e),t(...i))},e)}off(n,t){if(n===void 0){this._events.clear();return}if(t===void 0){this._events.delete(n);return}let e=this._events.get(n);e&&e.idMap.delete(t)&&(e.emitList=null,e.idMap.size||this._events.delete(n))}emit(n,...t){let e=this._getListeners(n);if(!e)return;let{length:s}=e;if(t.length)if(s===1)e[0](...t);else{let i=0;for(;i<s;i++)e[i](...t)}else if(s===1)e[0]();else{let i=0;for(;i<s;i++)e[i]()}}listenerCount(n){if(n===void 0){let t=0;return this._events.forEach((e,s)=>{t+=this.listenerCount(s)}),t}return this._events.get(n)?.idMap.size||0}};export{a as Emitter,r as EmitterDedupe};
