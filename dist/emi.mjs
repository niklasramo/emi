function getOrCreateEventData$1(e,t){let s=e.get(t);return s||(s=new EventData,e.set(t,s)),s}class EventData{idMap;fnMap;onceList;emitList;constructor(){this.idMap=new Map,this.fnMap=new Map,this.onceList=new Set,this.emitList=null}add(e,t){let s=this.fnMap.get(e);s||(s=new Set,this.fnMap.set(e,s));const i=Symbol();return s.add(i),this.idMap.set(i,e),t&&this.onceList.add(i),this.emitList&&this.emitList.push(e),i}delId(e){if(!this.idMap.has(e))return;const t=this.idMap.get(e),s=this.fnMap.get(t);this.onceList.delete(e),this.idMap.delete(e),s.delete(e),s.size||this.fnMap.delete(t),this.emitList=null}delFn(e){const t=this.fnMap.get(e);if(t){for(const e of t)this.onceList.delete(e),this.idMap.delete(e);this.fnMap.delete(e),this.emitList=null}}}class Emitter{_events;constructor(){this._events=new Map}on(e,t){return getOrCreateEventData$1(this._events,e).add(t)}once(e,t){return getOrCreateEventData$1(this._events,e).add(t,!0)}off(e,t){if(void 0===e)return void this._events.clear();if(void 0===t)return void this._events.delete(e);const s=this._events.get(e);s&&("function"==typeof t?s.delFn(t):s.delId(t),s.idMap.size||this._events.delete(e))}emit(e,...t){const s=this._events.get(e);if(!s)return;const{idMap:i,onceList:n}=s;if(!i.size)return;const r=s.emitList||[...i.values()];if(n.size)if(n.size===i.size)this._events.delete(e);else for(const e of n)s.delId(e);else s.emitList=r;let a=0,o=r.length;for(;a<o;a++)r[a](...t)}}function getOrCreateEventData(e,t){let s=e.get(t);return s||(s={list:new Set,onceList:new Set,emitList:null},e.set(t,s)),s}class UniqueEmitter{_events;constructor(){this._events=new Map}on(e,t){const{list:s,emitList:i}=getOrCreateEventData(this._events,e);return s.has(t)||(s.add(t),i&&i.push(t)),t}once(e,t){const{list:s,onceList:i,emitList:n}=getOrCreateEventData(this._events,e);return s.has(t)||(s.add(t),i.add(t),n&&n.push(t)),t}off(e,t){if(void 0===e)return void this._events.clear();if(void 0===t)return void this._events.delete(e);const s=this._events.get(e);s&&s.list.has(t)&&(s.list.delete(t),s.onceList.delete(t),s.emitList=null,s.list.size||this._events.delete(e))}emit(e,...t){const s=this._events.get(e);if(!s)return;const{list:i,onceList:n,emitList:r}=s;if(!i.size)return;const a=r||[...i];if(n.size)if(n.size===i.size)this._events.delete(e);else{for(const e of n)i.delete(e);n.clear(),s.emitList=null}else s.emitList=a;let o=0,l=a.length;for(;o<l;o++)a[o](...t)}}export{Emitter,UniqueEmitter};