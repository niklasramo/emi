{"version":3,"file":"emi.cjs","sources":["../src/Emitter.ts","../src/UniqueEmitter.ts"],"sourcesContent":["import { EventType, EventListener, EventListenerId, Events } from './types';\n\nclass EventData {\n  idMap: Map<EventListenerId, EventListener>;\n  fnMap: Map<EventListener, Set<EventListenerId>>;\n  onceList: Set<EventListenerId>;\n  emitList: EventListener[] | null;\n\n  constructor() {\n    this.idMap = new Map();\n    this.fnMap = new Map();\n    this.onceList = new Set();\n    this.emitList = null;\n  }\n\n  addListener(listener: EventListener, once?: boolean): EventListenerId {\n    // Create unique listener id, a symbol is optimal for this case since we\n    // need uid, but not uuid.\n    const listenerId = Symbol();\n\n    // Get/Create existing listener ids for the listener.\n    let listenerIds = this.fnMap.get(listener);\n    if (!listenerIds) {\n      listenerIds = new Set();\n      this.fnMap.set(listener, listenerIds);\n    }\n\n    // Store listener and listener id.\n    listenerIds.add(listenerId);\n    this.idMap.set(listenerId, listener);\n\n    // Add to once list if needed.\n    if (once) {\n      this.onceList.add(listenerId);\n    }\n\n    // Add to emit list if needed.\n    this.emitList?.push(listener);\n\n    return listenerId;\n  }\n\n  deleteListener(listenerId: EventListenerId) {\n    if (!this.idMap.has(listenerId)) return;\n\n    const listener = this.idMap.get(listenerId) as EventListener;\n    const listenerIds = this.fnMap.get(listener) as Set<EventListenerId>;\n\n    this.onceList.delete(listenerId);\n    this.idMap.delete(listenerId);\n    listenerIds.delete(listenerId);\n\n    if (!listenerIds.size) {\n      this.fnMap.delete(listener);\n    }\n\n    this.emitList = null;\n  }\n\n  deleteListeners(listener: EventListener) {\n    const listenerIds = this.fnMap.get(listener);\n    if (!listenerIds) return;\n\n    for (const listenerId of listenerIds) {\n      this.onceList.delete(listenerId);\n      this.idMap.delete(listenerId);\n    }\n\n    this.fnMap.delete(listener);\n    this.emitList = null;\n  }\n}\n\nexport class Emitter<T extends Events> {\n  protected _events: Map<EventType, EventData>;\n\n  constructor() {\n    this._events = new Map();\n  }\n\n  on<EventType extends keyof T>(type: EventType, listener: T[EventType]): EventListenerId {\n    // Get event data.\n    let eventData = this._events.get(type);\n\n    // Create event data if it does not exist yet.\n    if (!eventData) {\n      eventData = new EventData();\n      this._events.set(type, eventData);\n    }\n\n    // Add the listener to the event data and return the listener id.\n    return eventData.addListener(listener);\n  }\n\n  once<EventType extends keyof T>(type: EventType, listener: T[EventType]): EventListenerId {\n    // Get event data.\n    let eventData = this._events.get(type);\n\n    // Create event data if it does not exist yet.\n    if (!eventData) {\n      eventData = new EventData();\n      this._events.set(type, eventData);\n    }\n\n    // Add the listener to the event (with once flag) data and return the\n    // listener id.\n    return eventData.addListener(listener, true);\n  }\n\n  off<EventType extends keyof T>(\n    type?: EventType,\n    listener?: T[EventType] | EventListenerId\n  ): void {\n    // If type is undefined, let's remove all listeners from the emitter.\n    if (type === undefined) {\n      this._events.clear();\n      return;\n    }\n\n    // If listener is undefined, let's remove all listeners from the type.\n    if (listener === undefined) {\n      this._events.delete(type);\n      return;\n    }\n\n    // Let's get the event data for the listener.\n    const eventData = this._events.get(type);\n    if (!eventData) return;\n\n    // If listener is a function let's delete all instances of it from the\n    // event type.\n    if (typeof listener === 'function') {\n      eventData.deleteListeners(listener);\n    }\n    // If the listener is a listener id let's delete the specific listener.\n    else {\n      eventData.deleteListener(listener);\n    }\n\n    // If the event type doesn't have any listeners left let's delete it.\n    if (!eventData.idMap.size) {\n      this._events.delete(type);\n    }\n  }\n\n  emit<EventType extends keyof T>(type: EventType, ...args: Parameters<T[EventType]>): void {\n    const eventData = this._events.get(type);\n    if (!eventData || !eventData.idMap.size) return;\n\n    // Get the listeners for this emit process. If we have cached listeners\n    // in event data (emit list) we use that, and fallback to cloning the\n    // listeners from the id map. The listeners we loop should be just a\n    // simple array for best performance. Cloning the listeners is expensive,\n    // which is why we do it only when absolutely needed.\n    const listeners = eventData.emitList || [...eventData.idMap.values()];\n\n    // Cache the listeners.\n    eventData.emitList = listeners;\n\n    // Delete all once listeners _after_ the clone operation. We don't want\n    // to touch the cloned/cached listeners here, but only the \"live\" data.\n    // Note the listeners will be uncached from event data via\n    // \"eventData.deleteListener\" method in case there are once listeners,\n    // intentionally.\n    if (eventData.onceList.size) {\n      // If once list has all the listener ids we can just delete the event\n      // and be done with it as there's no listeners left.\n      if (eventData.onceList.size === eventData.idMap.size) {\n        this._events.delete(type);\n      }\n      // Otherwise, let's delete the listeners one by one.\n      else {\n        for (const listenerId of eventData.onceList) {\n          eventData.deleteListener(listenerId);\n        }\n      }\n    }\n\n    // Execute the current event listeners. Basic for loop for the win. Here\n    // it is important to cache the listeners' length for functionality's sake\n    // as the listeners array may grow during execution (but not shrink).\n    let i = 0;\n    let l = listeners.length;\n    for (; i < l; i++) {\n      listeners[i](...(args as any[]));\n    }\n  }\n}\n","import { EventType, EventListener, Events } from './types';\n\ninterface EventData {\n  listeners: Set<EventListener>;\n  onceListeners: Set<EventListener>;\n  emitList: EventListener[] | null;\n}\n\nexport class UniqueEmitter<T extends Events> {\n  protected _events: Map<EventType, EventData>;\n\n  constructor() {\n    this._events = new Map();\n  }\n\n  protected _createEventData<EventType extends keyof T>(type: EventType): EventData {\n    const eventData: EventData = {\n      listeners: new Set(),\n      onceListeners: new Set(),\n      emitList: null,\n    };\n    this._events.set(type, eventData);\n    return eventData;\n  }\n\n  on<EventType extends keyof T>(type: EventType, listener: T[EventType]): T[EventType] {\n    const { listeners, emitList } = this._events.get(type) || this._createEventData(type);\n    if (!listeners.has(listener)) {\n      listeners.add(listener);\n      emitList?.push(listener);\n    }\n    return listener;\n  }\n\n  once<EventType extends keyof T>(type: EventType, listener: T[EventType]): T[EventType] {\n    const { listeners, onceListeners, emitList } =\n      this._events.get(type) || this._createEventData(type);\n    if (!listeners.has(listener)) {\n      listeners.add(listener);\n      onceListeners.add(listener);\n      emitList?.push(listener);\n    }\n    return listener;\n  }\n\n  off<EventType extends keyof T>(type?: EventType, listener?: T[EventType]): void {\n    if (type === undefined) {\n      this._events.clear();\n      return;\n    }\n\n    if (listener === undefined) {\n      this._events.delete(type);\n      return;\n    }\n\n    const eventData = this._events.get(type);\n    if (!eventData) return;\n\n    eventData.listeners.delete(listener);\n    eventData.onceListeners.delete(listener);\n    eventData.emitList = null;\n\n    if (!eventData.listeners.size) {\n      this._events.delete(type);\n    }\n  }\n\n  emit<EventType extends keyof T>(type: EventType, data: Parameters<T[EventType]>[0]): void {\n    const eventData = this._events.get(type);\n    if (!eventData) return;\n\n    const listeners = eventData.emitList || [...eventData.listeners];\n\n    if (eventData.onceListeners.size) {\n      eventData.emitList = null;\n      for (const listener of eventData.onceListeners) {\n        eventData.listeners.delete(listener);\n      }\n      eventData.onceListeners.clear();\n    } else {\n      eventData.emitList = listeners;\n    }\n\n    let i = 0;\n    let l = listeners.length;\n    for (; i < l; i++) {\n      listeners[i](data);\n    }\n  }\n}\n"],"names":["EventData","this","idMap","fnMap","onceList","emitList","Map","Set","addListener","listener","once","listenerId","Symbol","listenerIds","get","set","add","push","deleteListener","has","size","deleteListeners","_step","_iterator","_createForOfIteratorHelperLoose","done","value","Emitter","_events","_proto2","prototype","on","type","eventData","off","undefined","clear","emit","listeners","values","_step2","_iterator2","i","l","length","apply","slice","call","arguments","UniqueEmitter","_createEventData","onceListeners","data"],"mappings":"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"}