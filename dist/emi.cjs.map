{"version":3,"file":"emi.cjs","sources":["../src/Emitter.ts","../src/UniqueEmitter.ts"],"sourcesContent":["import { EventType, EventListener, EventListenerId, Events } from './types';\n\nclass EventData {\n  idMap: Map<EventListenerId, EventListener>;\n  fnMap: Map<Function, Set<EventListenerId>>;\n  onceList: Set<EventListenerId>;\n  emitList: EventListener[] | null;\n\n  constructor() {\n    this.idMap = new Map();\n    this.fnMap = new Map();\n    this.onceList = new Set();\n    this.emitList = null;\n  }\n\n  addListener(listener: EventListener, once?: boolean): EventListenerId {\n    // Create unique listener id, a symbol is optimal for this case since we\n    // need uid, but not uuid.\n    const listenerId = Symbol();\n\n    // Get/Create existing listener ids for the listener.\n    let listenerIds = this.fnMap.get(listener);\n    if (!listenerIds) {\n      listenerIds = new Set();\n      this.fnMap.set(listener, listenerIds);\n    }\n\n    // Store listener and listener id.\n    listenerIds.add(listenerId);\n    this.idMap.set(listenerId, listener);\n\n    // Add to once list if needed.\n    if (once) {\n      this.onceList.add(listenerId);\n    }\n\n    // Add to emit list if needed.\n    this.emitList?.push(listener);\n\n    return listenerId;\n  }\n\n  deleteListener(listenerId: EventListenerId) {\n    if (!this.idMap.has(listenerId)) return;\n\n    const listener = this.idMap.get(listenerId) as EventListener;\n    const listenerIds = this.fnMap.get(listener) as Set<EventListenerId>;\n\n    this.onceList.delete(listenerId);\n    this.idMap.delete(listenerId);\n    listenerIds.delete(listenerId);\n\n    if (!listenerIds.size) {\n      this.fnMap.delete(listener);\n    }\n\n    this.emitList = null;\n  }\n\n  deleteListeners(listener: EventListener) {\n    const listenerIds = this.fnMap.get(listener);\n    if (!listenerIds) return;\n\n    for (const listenerId of listenerIds) {\n      this.onceList.delete(listenerId);\n      this.idMap.delete(listenerId);\n    }\n\n    this.fnMap.delete(listener);\n    this.emitList = null;\n  }\n}\n\nexport class Emitter<T extends Events> {\n  protected _events: Map<EventType, EventData>;\n\n  constructor() {\n    this._events = new Map();\n  }\n\n  on<EventType extends keyof T>(type: EventType, listener: T[EventType]): EventListenerId {\n    // Get event data.\n    let eventData = this._events.get(type);\n\n    // Create event data if it does not exist yet.\n    if (!eventData) {\n      eventData = new EventData();\n      this._events.set(type, eventData);\n    }\n\n    // Add the listener to the event data and return the listener id.\n    return eventData.addListener(listener);\n  }\n\n  once<EventType extends keyof T>(type: EventType, listener: T[EventType]): EventListenerId {\n    // Get event data.\n    let eventData = this._events.get(type);\n\n    // Create event data if it does not exist yet.\n    if (!eventData) {\n      eventData = new EventData();\n      this._events.set(type, eventData);\n    }\n\n    // Add the listener to the event (with once flag) data and return the\n    // listener id.\n    return eventData.addListener(listener, true);\n  }\n\n  off<EventType extends keyof T>(\n    type?: EventType,\n    listener?: T[EventType] | EventListenerId\n  ): void {\n    // If type is undefined, let's remove all listeners from the emitter.\n    if (type === undefined) {\n      this._events.clear();\n      return;\n    }\n\n    // If listener is undefined, let's remove all listeners from the type.\n    if (listener === undefined) {\n      this._events.delete(type);\n      return;\n    }\n\n    // Let's get the event data for the listener.\n    const eventData = this._events.get(type);\n    if (!eventData) return;\n\n    // If listener is a function let's delete all instances of it from the\n    // event type.\n    if (typeof listener === 'function') {\n      eventData.deleteListeners(listener);\n    }\n    // If the listener is a listener id let's delete the specific listener.\n    else {\n      eventData.deleteListener(listener);\n    }\n\n    // If the event type doesn't have any listeners left let's delete it.\n    if (!eventData.idMap.size) {\n      this._events.delete(type);\n    }\n  }\n\n  emit<EventType extends keyof T>(type: EventType, ...args: Parameters<T[EventType]>): void {\n    const eventData = this._events.get(type);\n    if (!eventData || !eventData.idMap.size) return;\n\n    // Get the listeners for this emit process. If we have cached listeners\n    // in event data (emit list) we use that, and fallback to cloning the\n    // listeners from the id map. The listeners we loop should be just a\n    // simple array for best performance. Cloning the listeners is expensive,\n    // which is why we do it only when absolutely needed.\n    const listeners = eventData.emitList || [...eventData.idMap.values()];\n\n    // Cache the listeners.\n    eventData.emitList = listeners;\n\n    // Delete all once listeners _after_ the clone operation. We don't want\n    // to touch the cloned/cached listeners here, but only the \"live\" data.\n    // Note the listeners will be uncached from event data via\n    // \"eventData.deleteListener\" method in case there are once listeners,\n    // intentionally.\n    if (eventData.onceList.size) {\n      for (const listenerId of eventData.onceList) {\n        eventData.deleteListener(listenerId);\n      }\n    }\n\n    // Execute the current event listeners. Basic for loop for the win. Here\n    // it is important to cache the listeners' length for functionality's sake\n    // as the listeners array may grow during execution (but not shrink).\n    let i = 0;\n    let l = listeners.length;\n    for (; i < l; i++) {\n      listeners[i](...(args as any[]));\n    }\n  }\n}\n","import { EventType, EventListener, Events } from './types';\n\ninterface EventData {\n  listeners: Set<EventListener>;\n  onceListeners: Set<EventListener>;\n  emitList: EventListener[] | null;\n}\n\nexport class UniqueEmitter<T extends Events> {\n  protected _events: Map<EventType, EventData>;\n\n  constructor() {\n    this._events = new Map();\n  }\n\n  protected _createEventData<EventType extends keyof T>(type: EventType): EventData {\n    const eventData: EventData = {\n      listeners: new Set(),\n      onceListeners: new Set(),\n      emitList: null,\n    };\n    this._events.set(type, eventData);\n    return eventData;\n  }\n\n  on<EventType extends keyof T>(type: EventType, listener: T[EventType]): void {\n    const { listeners, emitList } = this._events.get(type) || this._createEventData(type);\n    if (!listeners.has(listener)) {\n      listeners.add(listener);\n      emitList?.push(listener);\n    }\n  }\n\n  once<EventType extends keyof T>(type: EventType, listener: T[EventType]): void {\n    const { listeners, onceListeners, emitList } =\n      this._events.get(type) || this._createEventData(type);\n    if (!listeners.has(listener)) {\n      listeners.add(listener);\n      onceListeners.add(listener);\n      emitList?.push(listener);\n    }\n  }\n\n  off<EventType extends keyof T>(type?: EventType, listener?: T[EventType]): void {\n    if (type === undefined) {\n      this._events.clear();\n      return;\n    }\n\n    if (listener === undefined) {\n      this._events.delete(type);\n      return;\n    }\n\n    const eventData = this._events.get(type);\n    if (!eventData) return;\n\n    eventData.listeners.delete(listener);\n    eventData.onceListeners.delete(listener);\n    eventData.emitList = null;\n\n    if (!eventData.listeners.size) {\n      this._events.delete(type);\n    }\n  }\n\n  emit<EventType extends keyof T>(type: EventType, data: Parameters<T[EventType]>[0]): void {\n    const eventData = this._events.get(type);\n    if (!eventData) return;\n\n    const listeners = eventData.emitList || [...eventData.listeners];\n\n    if (eventData.onceListeners.size) {\n      eventData.emitList = null;\n      for (const listener of eventData.onceListeners) {\n        eventData.listeners.delete(listener);\n      }\n      eventData.onceListeners.clear();\n    } else {\n      eventData.emitList = listeners;\n    }\n\n    let i = 0;\n    let l = listeners.length;\n    for (; i < l; i++) {\n      listeners[i](data);\n    }\n  }\n}\n"],"names":["EventData","this","idMap","fnMap","onceList","emitList","Map","Set","addListener","listener","once","_this$emitList","listenerId","Symbol","listenerIds","get","set","add","push","deleteListener","has","size","deleteListeners","_step","_iterator","_createForOfIteratorHelperLoose","done","value","Emitter","_events","on","type","eventData","_proto2","off","undefined","clear","emit","listeners","values","_step2","_iterator2","i","l","length","apply","slice","call","arguments","UniqueEmitter","_createEventData","onceListeners","_ref","_proto","_ref2","data"],"mappings":"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"}