function e(e,s){let i=e.get(s);return i||(i=new t,e.set(s,i)),i}class t{constructor(){this.idMap=void 0,this.fnMap=void 0,this.onceList=void 0,this.emitList=void 0,this.idMap=new Map,this.fnMap=new Map,this.onceList=new Set,this.emitList=null}addListener(e,t){var s;let i=this.fnMap.get(e);i||(i=new Set,this.fnMap.set(e,i));const n=Symbol();return i.add(n),this.idMap.set(n,e),t&&this.onceList.add(n),null==(s=this.emitList)||s.push(e),n}deleteListener(e){if(!this.idMap.has(e))return;const t=this.idMap.get(e),s=this.fnMap.get(t);this.onceList.delete(e),this.idMap.delete(e),s.delete(e),s.size||this.fnMap.delete(t),this.emitList=null}deleteListeners(e){const t=this.fnMap.get(e);if(t){for(const e of t)this.onceList.delete(e),this.idMap.delete(e);this.fnMap.delete(e),this.emitList=null}}}class s{constructor(){this._events=void 0,this._events=new Map}on(t,s){return e(this._events,t).addListener(s)}once(t,s){return e(this._events,t).addListener(s,!0)}off(e,t){if(void 0===e)return void this._events.clear();if(void 0===t)return void this._events.delete(e);const s=this._events.get(e);s&&("function"==typeof t?s.deleteListeners(t):s.deleteListener(t),s.idMap.size||this._events.delete(e))}emit(e,...t){const s=this._events.get(e);if(!s)return;const{idMap:i,onceList:n}=s;if(!i.size)return;const o=s.emitList||[...i.values()];if(n.size)if(n.size===i.size)this._events.delete(e);else for(const e of n)s.deleteListener(e);else s.emitList=o;let r=0,l=o.length;for(;r<l;r++)o[r](...t)}}function i(e,t){let s=e.get(t);return s||(s={listeners:new Set,onceListeners:new Set,emitList:null},e.set(t,s)),s}class n{constructor(){this._events=void 0,this._events=new Map}on(e,t){const{listeners:s,emitList:n}=i(this._events,e);return s.has(t)||(s.add(t),null==n||n.push(t)),t}once(e,t){const{listeners:s,onceListeners:n,emitList:o}=i(this._events,e);return s.has(t)||(s.add(t),n.add(t),null==o||o.push(t)),t}off(e,t){if(void 0===e)return void this._events.clear();if(void 0===t)return void this._events.delete(e);const s=this._events.get(e);s&&(s.listeners.delete(t),s.onceListeners.delete(t),s.emitList=null,s.listeners.size||this._events.delete(e))}emit(e,t){const s=this._events.get(e);if(!s)return;const{listeners:i,onceListeners:n,emitList:o}=s;if(!i.size)return;const r=o||[...i];if(n.size)if(n.size===i.size)this._events.delete(e);else{for(const e of n)i.delete(e);n.clear(),s.emitList=null}else s.emitList=r;let l=0,d=r.length;for(;l<d;l++)r[l](t)}}export{s as Emitter,n as UniqueEmitter};
//# sourceMappingURL=emi.modern.js.map
