class e{constructor(){this.idMap=void 0,this.fnMap=void 0,this.onceList=void 0,this.emitList=void 0,this.idMap=new Map,this.fnMap=new Map,this.onceList=new Set,this.emitList=null}addListener(e,t){var s;const i=Symbol();let n=this.fnMap.get(e);return n||(n=new Set,this.fnMap.set(e,n)),n.add(i),this.idMap.set(i,e),t&&this.onceList.add(i),null==(s=this.emitList)||s.push(e),i}deleteListener(e){if(!this.idMap.has(e))return;const t=this.idMap.get(e),s=this.fnMap.get(t);this.onceList.delete(e),this.idMap.delete(e),s.delete(e),s.size||this.fnMap.delete(t),this.emitList=null}deleteListeners(e){const t=this.fnMap.get(e);if(t){for(const e of t)this.onceList.delete(e),this.idMap.delete(e);this.fnMap.delete(e),this.emitList=null}}}class t{constructor(){this._events=void 0,this._events=new Map}on(t,s){let i=this._events.get(t);return i||(i=new e,this._events.set(t,i)),i.addListener(s)}once(t,s){let i=this._events.get(t);return i||(i=new e,this._events.set(t,i)),i.addListener(s,!0)}off(e,t){if(void 0===e)return void this._events.clear();if(void 0===t)return void this._events.delete(e);const s=this._events.get(e);s&&("function"==typeof t?s.deleteListeners(t):s.deleteListener(t),s.idMap.size||this._events.delete(e))}emit(e,...t){const s=this._events.get(e);if(!s||!s.idMap.size)return;const i=s.emitList||[...s.idMap.values()];if(s.emitList=i,s.onceList.size)if(s.onceList.size===s.idMap.size)this._events.delete(e);else for(const e of s.onceList)s.deleteListener(e);let n=0,o=i.length;for(;n<o;n++)i[n](...t)}}class s{constructor(){this._events=void 0,this._events=new Map}_createEventData(e){const t={listeners:new Set,onceListeners:new Set,emitList:null};return this._events.set(e,t),t}on(e,t){const{listeners:s,emitList:i}=this._events.get(e)||this._createEventData(e);return s.has(t)||(s.add(t),null==i||i.push(t)),t}once(e,t){const{listeners:s,onceListeners:i,emitList:n}=this._events.get(e)||this._createEventData(e);return s.has(t)||(s.add(t),i.add(t),null==n||n.push(t)),t}off(e,t){if(void 0===e)return void this._events.clear();if(void 0===t)return void this._events.delete(e);const s=this._events.get(e);s&&(s.listeners.delete(t),s.onceListeners.delete(t),s.emitList=null,s.listeners.size||this._events.delete(e))}emit(e,t){const s=this._events.get(e);if(!s)return;const i=s.emitList||[...s.listeners];if(s.onceListeners.size){s.emitList=null;for(const e of s.onceListeners)s.listeners.delete(e);s.onceListeners.clear()}else s.emitList=i;let n=0,o=i.length;for(;n<o;n++)i[n](t)}}export{t as Emitter,s as UniqueEmitter};
//# sourceMappingURL=emi.modern.js.map
