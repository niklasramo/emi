class e{constructor(){this.idMap=void 0,this.fnMap=void 0,this.onceList=void 0,this.idMap=new Map,this.fnMap=new Map,this.onceList=new Set}addListener(e,t){const s=Symbol();let i=this.fnMap.get(e);return i||(i=new Set,this.fnMap.set(e,i)),i.add(s),this.idMap.set(s,e),t&&this.onceList.add(s),s}deleteListenerById(e){if(this.idMap.has(e)){const t=this.idMap.get(e),s=this.fnMap.get(t);this.onceList.delete(e),this.idMap.delete(e),s.delete(e),s.size||this.fnMap.delete(t)}}deleteMatchingListeners(e){const t=this.fnMap.get(e);if(t){for(const e of t)this.onceList.delete(e),this.idMap.delete(e);this.fnMap.delete(e)}}deleteOnceListeners(){for(const e of this.onceList)this.deleteListenerById(e)}}class t{constructor(){this._events=void 0,this._once=void 0,this._events=new Map,this._once=!1}on(t,s){const{_once:i}=this;this._once=!1;let n=this._events.get(t);if(n)return n.addListener(s,i);n=new e;const d=n.addListener(s,i);return this._events.set(t,n),d}once(e,t){return this._once=!0,this.on(e,t)}off(e,t){if(void 0===e)return void this._events.clear();if(void 0===t)return void this._events.delete(e);const s=this._events.get(e);s&&("function"==typeof t?s.deleteMatchingListeners(t):s.deleteListenerById(t),s.idMap.size||this._events.delete(e))}emit(e,...t){const s=this._events.get(e);if(!s)return;const i=[...s.idMap.values()];s.deleteOnceListeners();let n=0,d=i.length;for(;n<d;n++)i[n](...t)}}export{t as Emitter};
//# sourceMappingURL=emi.modern.js.map
