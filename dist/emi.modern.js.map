{"version":3,"file":"emi.modern.js","sources":["../src/index.ts"],"sourcesContent":["export type EmitterEventType = string | number | symbol;\n\nexport type EmitterEventListener = (...data: any) => any;\n\nexport type EmitterEventListenerId = string | number | symbol;\n\nexport type EmitterEvents = Record<EmitterEventType, EmitterEventListener>;\n\nclass EmitterEventData {\n  idMap: Map<EmitterEventListenerId, Function>;\n  fnMap: Map<Function, Set<EmitterEventListenerId>>;\n  onceList: Set<EmitterEventListenerId>;\n\n  constructor() {\n    this.idMap = new Map();\n    this.fnMap = new Map();\n    this.onceList = new Set();\n  }\n\n  addListener(listener: Function, once?: boolean): EmitterEventListenerId {\n    const listenerId = Symbol();\n\n    let listenerIds = this.fnMap.get(listener);\n    if (!listenerIds) {\n      listenerIds = new Set();\n      this.fnMap.set(listener, listenerIds);\n    }\n\n    listenerIds.add(listenerId);\n    this.idMap.set(listenerId, listener);\n    if (once) {\n      this.onceList.add(listenerId);\n    }\n\n    return listenerId;\n  }\n\n  deleteListenerById(listenerId: EmitterEventListenerId) {\n    if (this.idMap.has(listenerId)) {\n      const listener = this.idMap.get(listenerId) as EmitterEventListener;\n      const listenerIds = this.fnMap.get(\n        listener\n      ) as Set<EmitterEventListenerId>;\n      this.onceList.delete(listenerId);\n      this.idMap.delete(listenerId);\n      listenerIds.delete(listenerId);\n      if (!listenerIds.size) {\n        this.fnMap.delete(listener);\n      }\n    }\n  }\n\n  deleteMatchingListeners(listener: EmitterEventListener) {\n    const listenerIds = this.fnMap.get(listener);\n    if (!listenerIds) return;\n\n    for (const listenerId of listenerIds) {\n      this.onceList.delete(listenerId);\n      this.idMap.delete(listenerId);\n    }\n\n    this.fnMap.delete(listener);\n  }\n\n  deleteOnceListeners() {\n    for (const listenerId of this.onceList) {\n      this.deleteListenerById(listenerId);\n    }\n  }\n}\n\nexport class Emitter<Events extends EmitterEvents> {\n  protected _events: Map<EmitterEventType, EmitterEventData>;\n  protected _once: boolean;\n\n  constructor() {\n    this._events = new Map();\n    this._once = false;\n  }\n\n  on<EventType extends keyof Events>(\n    type: EventType,\n    listener: Events[EventType]\n  ): EmitterEventListenerId {\n    const { _once } = this;\n    this._once = false;\n\n    let eventData = this._events.get(type);\n    if (eventData) {\n      return eventData.addListener(listener, _once);\n    }\n\n    eventData = new EmitterEventData();\n    const listenerId = eventData.addListener(listener, _once);\n    this._events.set(type, eventData);\n    return listenerId;\n  }\n\n  once<EventType extends keyof Events>(\n    type: EventType,\n    listener: Events[EventType]\n  ): EmitterEventListenerId {\n    this._once = true;\n    return this.on(type, listener);\n  }\n\n  off<EventType extends keyof Events>(\n    type?: EventType,\n    listener?: Events[EventType] | EmitterEventListenerId\n  ): void {\n    // If type is undefined, let's remove all listeners from the emitter.\n    if (type === undefined) {\n      this._events.clear();\n      return;\n    }\n\n    // If listener is undefined, let's remove all listeners from the type.\n    if (listener === undefined) {\n      this._events.delete(type);\n      return;\n    }\n\n    // Let's get the event data for the listener.\n    const eventData = this._events.get(type);\n    if (!eventData) return;\n\n    // If listener is a function let's delete all instances of it from the\n    // event type.\n    if (typeof listener === \"function\") {\n      eventData.deleteMatchingListeners(listener);\n    }\n    // If the listener is a listener id let's delete the specific listener.\n    else {\n      eventData.deleteListenerById(listener);\n    }\n\n    // If the event type doesn't have any listeners left let's delete it.\n    if (!eventData.idMap.size) {\n      this._events.delete(type);\n    }\n  }\n\n  emit<EventType extends keyof Events>(\n    type: EventType,\n    ...args: Parameters<Events[EventType]>\n  ): void {\n    const eventData = this._events.get(type);\n    if (!eventData) return;\n\n    // We need to clone the listeners in order to guarantee the execution of\n    // all the listeners that exist currently. If we didn't do this then\n    // adding/removing listeners within the listener callbacks would affect\n    // the processing of the listeners.\n    const listeners = [...eventData.idMap.values()];\n\n    // Delete all once listeners _after_ the clone operation. It's important\n    // we do this before executing the listeners, otherwise the once listeners\n    // can be called multiple times before they are removed.\n    eventData.deleteOnceListeners();\n\n    // Execute all event listeners.\n    let i = 0;\n    let l = listeners.length;\n    for (; i < l; i++) {\n      listeners[i](...(args as any[]));\n    }\n  }\n}\n"],"names":["EmitterEventData","constructor","this","idMap","fnMap","onceList","Map","Set","addListener","listener","once","listenerId","Symbol","listenerIds","get","set","add","deleteListenerById","has","delete","size","deleteMatchingListeners","deleteOnceListeners","Emitter","_events","_once","on","type","eventData","off","undefined","clear","emit","args","listeners","values","i","l","length"],"mappings":"AAQA,MAAMA,EAKJC,cAAAC,KAJAC,WAIA,EAAAD,KAHAE,WAGA,EAAAF,KAFAG,cAEA,EACEH,KAAKC,MAAQ,IAAIG,IACjBJ,KAAKE,MAAQ,IAAIE,IACjBJ,KAAKG,SAAW,IAAIE,IAGtBC,YAAYC,EAAoBC,GAC9B,MAAMC,EAAaC,SAEnB,IAAIC,EAAcX,KAAKE,MAAMU,IAAIL,GAYjC,OAXKI,IACHA,EAAc,IAAIN,IAClBL,KAAKE,MAAMW,IAAIN,EAAUI,IAG3BA,EAAYG,IAAIL,GAChBT,KAAKC,MAAMY,IAAIJ,EAAYF,GACvBC,GACFR,KAAKG,SAASW,IAAIL,GAGbA,EAGTM,mBAAmBN,GACjB,GAAIT,KAAKC,MAAMe,IAAIP,GAAa,CAC9B,MAAMF,EAAWP,KAAKC,MAAMW,IAAIH,GAC1BE,EAAcX,KAAKE,MAAMU,IAC7BL,GAEFP,KAAKG,SAASc,OAAOR,GACrBT,KAAKC,MAAMgB,OAAOR,GAClBE,EAAYM,OAAOR,GACdE,EAAYO,MACflB,KAAKE,MAAMe,OAAOV,IAKxBY,wBAAwBZ,GACtB,MAAMI,EAAcX,KAAKE,MAAMU,IAAIL,GACnC,GAAKI,EAAL,CAEA,IAAK,MAAMF,KAAcE,EACvBX,KAAKG,SAASc,OAAOR,GACrBT,KAAKC,MAAMgB,OAAOR,GAGpBT,KAAKE,MAAMe,OAAOV,IAGpBa,sBACE,IAAK,MAAMX,KAAmBN,KAAAA,SAC5BH,KAAKe,mBAAmBN,IAKjBY,MAAAA,EAIXtB,cAAAC,KAHUsB,aAGV,EAAAtB,KAFUuB,WAEV,EACEvB,KAAKsB,QAAU,IAAIlB,IACnBJ,KAAKuB,OAAQ,EAGfC,GACEC,EACAlB,GAEA,MAAMgB,MAAEA,GAAUvB,KAClBA,KAAKuB,OAAQ,EAEb,IAAIG,EAAY1B,KAAKsB,QAAQV,IAAIa,GACjC,GAAIC,EACF,OAAOA,EAAUpB,YAAYC,EAAUgB,GAGzCG,EAAY,IAAI5B,EAChB,MAAMW,EAAaiB,EAAUpB,YAAYC,EAAUgB,GAEnD,OADAvB,KAAKsB,QAAQT,IAAIY,EAAMC,GAChBjB,EAGTD,KACEiB,EACAlB,GAGA,OADAP,KAAKuB,OAAQ,EACDC,KAAAA,GAAGC,EAAMlB,GAGvBoB,IACEF,EACAlB,GAGA,QAAaqB,IAATH,EAEF,YADAzB,KAAKsB,QAAQO,QAKf,QAAiBD,IAAbrB,EAEF,YADAP,KAAKsB,QAAQL,OAAOQ,GAKtB,MAAMC,EAAY1B,KAAKsB,QAAQV,IAAIa,GAC9BC,IAImB,mBAAbnB,EACTmB,EAAUP,wBAAwBZ,GAIlCmB,EAAUX,mBAAmBR,GAI1BmB,EAAUzB,MAAMiB,MACnBlB,KAAKsB,QAAQL,OAAOQ,IAIxBK,KACEL,KACGM,GAEH,MAAML,EAAY1B,KAAKsB,QAAQV,IAAIa,GACnC,IAAKC,EAAW,OAMhB,MAAMM,EAAY,IAAIN,EAAUzB,MAAMgC,UAKtCP,EAAUN,sBAGV,IAAIc,EAAI,EACJC,EAAIH,EAAUI,OAClB,KAAOF,EAAIC,EAAGD,IACZF,EAAUE,MAAOH"}