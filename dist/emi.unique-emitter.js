function getOrCreateEventData(e,t){let s=e.get(t);return s||(s={list:new Set,onceList:new Set,emitList:null},e.set(t,s)),s}class UniqueEmitter{_events;constructor(){this._events=new Map}on(e,t){const{list:s,emitList:i}=getOrCreateEventData(this._events,e);return s.has(t)||(s.add(t),i&&i.push(t)),t}once(e,t){const{list:s,onceList:i,emitList:n}=getOrCreateEventData(this._events,e);return s.has(t)||(s.add(t),i.add(t),n&&n.push(t)),t}off(e,t){if(void 0===e)return void this._events.clear();if(void 0===t)return void this._events.delete(e);const s=this._events.get(e);s&&s.list.has(t)&&(s.list.delete(t),s.onceList.delete(t),s.emitList=null,s.list.size||this._events.delete(e))}emit(e,...t){const s=this._events.get(e);if(!s)return;const{list:i,onceList:n,emitList:r}=s;if(!i.size)return;const l=r||[...i];if(n.size)if(n.size===i.size)this._events.delete(e);else{for(const e of n)i.delete(e);n.clear(),s.emitList=null}else s.emitList=l;let o=0,a=l.length;for(;o<a;o++)l[o](...t)}}export{UniqueEmitter};