function getOrCreateEventData$1(t,e){let s=t.get(e);return s||(s=new EventData,t.set(e,s)),s}class EventData{idMap;fnMap;onceList;emitList;constructor(){this.idMap=new Map,this.fnMap=new Map,this.onceList=new Set,this.emitList=null}add(t,e){let s=this.fnMap.get(t);s||(s=new Set,this.fnMap.set(t,s));const i=Symbol();return s.add(i),this.idMap.set(i,t),e&&this.onceList.add(i),this.emitList&&this.emitList.push(t),i}delId(t){if(!this.idMap.has(t))return;const e=this.idMap.get(t),s=this.fnMap.get(e);this.onceList.delete(t),this.idMap.delete(t),s.delete(t),s.size||this.fnMap.delete(e),this.emitList=null}delFn(t){const e=this.fnMap.get(t);if(e){for(const t of e)this.onceList.delete(t),this.idMap.delete(t);this.fnMap.delete(t),this.emitList=null}}}class Emitter{_events;constructor(){this._events=new Map}_getListeners(t){const e=this._events.get(t);if(!e)return null;const{idMap:s,onceList:i}=e;if(!s.size)return null;const n=e.emitList||[...s.values()];if(i.size)if(i.size===s.size)this._events.delete(t);else for(const t of i)e.delId(t);else e.emitList=n;return n}on(t,e){return getOrCreateEventData$1(this._events,t).add(e)}once(t,e){return getOrCreateEventData$1(this._events,t).add(e,!0)}off(t,e){if(void 0===t)return void this._events.clear();if(void 0===e)return void this._events.delete(t);const s=this._events.get(t);s&&("function"==typeof e?s.delFn(e):s.delId(e),s.idMap.size||this._events.delete(t))}emit(t,...e){const s=this._getListeners(t);if(!s)return;let i=0,n=s.length;for(;i<n;i++)s[i](...e)}listenerCount(t){return this._events.get(t)?.idMap.size}}function getOrCreateEventData(t,e){let s=t.get(e);return s||(s={list:new Set,onceList:new Set,emitList:null},t.set(e,s)),s}class UniqueEmitter{_events;constructor(){this._events=new Map}_getListeners(t){const e=this._events.get(t);if(!e)return null;const{list:s,onceList:i,emitList:n}=e;if(!s.size)return null;const r=n||[...s];if(i.size)if(i.size===s.size)this._events.delete(t);else{for(const t of i)s.delete(t);i.clear(),e.emitList=null}else e.emitList=r;return r}on(t,e){const{list:s,emitList:i}=getOrCreateEventData(this._events,t);return s.has(e)||(s.add(e),i&&i.push(e)),e}once(t,e){const{list:s,onceList:i,emitList:n}=getOrCreateEventData(this._events,t);return s.has(e)||(s.add(e),i.add(e),n&&n.push(e)),e}off(t,e){if(void 0===t)return void this._events.clear();if(void 0===e)return void this._events.delete(t);const s=this._events.get(t);s&&s.list.has(e)&&(s.list.delete(e),s.onceList.delete(e),s.emitList=null,s.list.size||this._events.delete(t))}emit(t,...e){const s=this._getListeners(t);if(!s)return;let i=0,n=s.length;for(;i<n;i++)s[i](...e)}listenerCount(t){return this._events.get(t)?.list.size}}function batchEmit(t,e,...s){const i=[];let n=0,r=0,l=0,o=0;for(n=0,l=e.length;n<l;n++){const s=t._getListeners(e[n]);s&&i.push(s)}if(i.length)for(n=0,l=i.length;n<l;n++){const t=i[n];for(r=0,o=t.length;r<o;r++)t[r](...s)}}export{Emitter,UniqueEmitter,batchEmit};